use crate::ObjumpError;

#[derive(Debug)]
pub struct X8664ATTInstruction {
    pub opcode: X8664ATTOpcode,
    operands: Vec<X8664ATTOperand>,
    data: String,
}

#[derive(Debug)]
pub enum X8664ATTOpcode {
    Add,
    Insb,
    Imull,
    Subl,
    Js,
    Outsl,
    Xorb,
    Addb,
    Adcb,
    Addl,
    Pushq,
    Andl,
    Cmpb,
    Orl,
    Cmpl,
    Sbbb,
    Orb,
    Adcl,
    Lock,
    Movb,
    Rolb,
    Xchgl,
    Jne,
    Andb,
    Outl,
    Loopne,
    Addq,
    Movabsl,
    Lodsl,
    Lretl,
    Subb,
    Popq,
    Movslq,
    Jae,
    Xorl,
    Jb,
    Outsb,
    Addr32,
    Jo,
    Je,
    Insl,
    Ja,
    Gs,
    Outsw,
    Jns,
    Jbe,
    Imulw,
    Jp,
    Movsl,
    Scasl,
    Int,
    Movl,
    Jl,
    Clc,
    Xlatb,
    Outb,
    Jge,
    Nop,
    Testb,
    Shlb,
    Fsubs,
    Movabsb,
    Shrb,
    Callq,
    Cwtl,
    Fsubrs,
    Rep,
    Hlt,
    Incl,
    Jnp,
    Xorq,
    Fdivs,
    Sbbl,
    Rcrb,
    Rorb,
    Loope,
    Stosl,
    Testl,
    Enter,
    Sarb,
    Jno,
    Fnsave,
    Retq,
    Cmpq,
    Inb,
    Ds,
    Fdivrs,
    Xchgb,
    Fadds,
    Fimull,
    Movw,
    Lodsb,
    Leal,
    Andq,
    Fmuls,
    Jmp,
    Fiadds,
    Cli,
    Cmc,
    Stc,
    Incb,
    Std,
    Repne,
    Sti,
    Fldl,
    Popfq,
    Subq,
    Movq,
    Testq,
    Jmpq,
    Nopl,
    Testw,
    Incq,
    Rolw,
    Andw,
    Tzcntl,
    Leaq,
    Nopw,
    Movzbl,
    Bsrq,
    Notl,
    Shrq,
    Shlq,
    Cmovaeq,
    Movups,
    Movaps,
    Orq,
    Setb,
    Sete,
    Decq,
    Adcq,
    Cmovaq,
    Movabsq,
    Shll,
    Notq,
    Imulq,
    Xorps,
    Pause,
    Cmpxchgl,
    Cmovneq,
    Ud2,
    Decl,
    Jle,
    Sarq,
    Cqto,
    Idivq,
    Shrl,
    Setne,
    Jg,
    Cmovbq,
    Cmoveq,
    Negq,
    Movzwl,
    Sbbq,
    Mulq,
    Setae,
    Movd,
    Punpcklbw,
    Pshuflw,
    Pshufd,
    Movdqa,
    Movdqu,
    Pcmpeqb,
    Pand,
    Pmovmskb,
    Btq,
    Cmpw,
    Cmovgeq,
    Cmovel,
    Cmoval,
    Pinsrw,
    Pxor,
    Movss,
    Movsd,
    Btl,
    Divb,
    Negb,
    Cmovbl,
    Cmovbeq,
    Setbe,
    Movsbq,
    Notb,
    Divq,
    Divl,
    Pextrw,
    Psllw,
    Por,
	Punpcklwd,
	Punpckldq,
	Cmpxchgq,
	Cmovsq,
	Cmovnel,
	Cmovael,
	Xaddl,
	Movswq,
	Setg,
	Movlps,
	Punpcklqdq,
	Movlhps,
	Decb,
	Bswapl,
	Orw,
	Seta,
	Divw,
	Adcw,
	Movswl,
	Negl,
	Xorw,
	Paddd,
	Pmuludq,
	Psrld,
	Psubd,
	Psllq,
	Unpcklps,
	Mull,
	Seto,
	Bsrl,
	Paddq,
	Pandn,
	Pcmpgtb,
	Setge,
	Pcmpeqd,
	Psrlq,
	Punpckhqdq,
	Btsq,
	Pcmpgtd,
	Movmskps,
	Cmovsl,
	Shrdq,
	Shldq,
	Insw,
	Cld,
	Ljmpl,
	Lcalll,
	Sahf,
	Lahf,
	Scasb,
	Sarl,
	Leave,
	Fdivr,
	Inl,
	Rorl,
	Cmpsl,
	Vpaddw,
	Roll,
	Cmpsb,
	Fs,
	Filds,
	Pushw,
	Fdivrp,
	Ficomps,
	Es,
	Fbld,
	Movsb,
	Pushfq,
	Int3,
	Faddl,
	Stosb,
	Cltd,
	Wait,
	Rex64,
	Loop,
	Fiaddl,
	Data16,
	Ss,
	Cs,
	Flds,
	Fildl,
	Iretl,
	Rclb,
	Fcomp,
	Unpckhps,
	Vpandn,
	Fcmovu,
	Cltq,
	Fisttps,
	Fdiv,
	Fistps,
	Lsll,
	Sldtw,
	Fsincos,
	Jrcxz,
	Idivl,
	Fdivl,
	Fcomps,
	Idivb,
	Fisttpl,
	Fmull,
	Fsubl,
	Fcoml,
	Fbstp,
	Fcoms,
	Fsubr,
	Pmaxsw,
	Shufps,
	Prefetch,
	Fnstsw,
	Iretq,
	Paddw,
	Ljmpq,
	Ficoml,
	Sgdtq,
	Packuswb,
	Fisttpll,
	Addw,
	Monitorx,
	Fidivl,
	Ficompl,
	Lodsq,
	Getsec,
	Pslld,
	Fldt,
	Imulb,
	Rcrl,
	Fstpl,
	Fildll,
	Ficoms,
	Fdivrl,
	Rcll,
	Sysretl,
	Fistl,
	Fstps,
	Fidivrs,
	Frstor,
	Fists,
	Fimuls,
	Fucomp,
	Xchgq,
	Fldenv,
	Fucom,
	Fsubrl,
	Fsts,
	Fmul,
	Fmulp,
	Emms,
	Movsq,
	Fst,
	Fisubrs,
	Fld,
	Fadd,
	Invd,
	Ffree,
	Lretq,
	Scasq,
	Scasw,
	Xrelease,
	Fldcw,
	Fisubs,
	Clts,
	Wbinvd,
	Fcmovbe,
	Fcmovb,
	Punpckhdq,
	Fcmovnb,
	Fstl,
	Outw,
	Mulb,
	Larl,
	Sbbw,
	Rolq,
	Fucompi,
	Cmpsq,
	Fcompl,
	Lgdtq,
	Fisubrl,
	Xchgw,
	Femms,
	Fnstenv,
	Rdmsr,
	Paddusw,
	Frndint,
	Stosq,
	Verw,
	Lldtw,
	Cmovbel,
	Callw,
	Shrdl,
	Verr,
	Strw,
	Ltrw,
	Syscall,
	Packssdw,
	Cmovol,
	Bsfl,
	Strl,
	Setns,
	Smsww,
	Cmovnpl,
	Fidivrl,
	Fistpl,
	Paddsb,
	Strq,
	Vphaddw,
	Sldtq,
	Sldtl,
	Fsubp,
	Fucomi,
	Rsqrtps,
	Fstp,
	Fcmovnu,
	Prefetcht0,
	Prefetchnta,
	Popw,
	Lidtq,
	Rorq,
	Fistpll,
	Fnstcw,
	Psubw,
	Fcmovne,
	Fcmovnbe,
	Fidivs,
	Vpshrdvd,
	Fsub,
	Leaw,
	Fprem,
	Psubsw,
	Cmpsw,
	Stosw,
	Fincstp,
	Cmovpl,
	Cvtps2pi,
	Rdtsc,
	Ftst,
	Faddp,
	Shldl,
	Fcompp,
	Pmulhuw,
	Fstpt,
	Paddb,
	Psubq,
	Xacquire,
	Cvtdq2ps,
	Fxam,
	Vandps,
	Iretw,
	Fcom,
	Psubusw,
	Pminsw,
	Lgsl,
	Fisubl,
	Vroundsd,
	Fdivp,
	Vpshufb,
	Movntq,
	Sysenter,
	Cmovgel,
	Movsbl,
	Paddusb,
	Psraw,
	Movntil,
	Cmovnol,
	Mulps,
	Divps,
	Comiss,
	Btsl,
	Cpuid,
	Subps,
	Rcpps,
	Wrmsr,
	Setno,
	Movhps,
	Xaddb,
	Pmullw,
	Sqrtps,
	Pmaxub,
	Punpckhwd,
	Paddsw,
	Movntps,
	Punpckhbw,
	Fxsave,
	Pcmpgtw,
	Cvtps2pd,
	Pshufw,
	Prefetcht1,
	Fxtract,
	Movbel,
	Pmulhw,
	Prefetchw,
	Xabort,
	Ffreep,
	Lcallq,
	Pcmpeqw,
	Fcompi,
	Ucomiss,
	Addps,
	Setle,
	Vpcmpeqb,
	Vucomisd,
	Orps,
	Vpmaddubsw,
	Vaddss,
	Vunpckhpd,
	Vpslld,
	Vpcmpgtd,
	Vaddps,
	Vphsubw,
	Subw,
	Vpdpwssd,
	Vpblendmb,
	Vpsrlvd,
	Vpacksswb,
	Vminps,
	Vmaxsh,
	Vpermi2b,
	Vpminsd,
	Vmaxps,
	Vpblendmd,
	Vmaxph,
	Vpunpcklwd,
	Vpunpckhwd,
	Vpunpckldq,
	Vpermd,
	Vpshrdd,
	Vpackuswb,
	Vinserti32x4,
	Vpminsb,
	Vpermi2ps,
	Lodsw,
	Fxch,
	Cmovlel,
	Cwtd,
	Retw,
	Btcl,
	Fsubrp,
	Fldlg2,
	Fptan,
	Fcos,
	Fucompp,
    Unknown(String),
}

impl From<&str> for X8664ATTOpcode {
    fn from(opcode: &str) -> Self {
        match opcode {
            "add" => X8664ATTOpcode::Add,
            "insb" => X8664ATTOpcode::Insb,
            "imull" => X8664ATTOpcode::Imull,
            "subl" => X8664ATTOpcode::Subl,
            "js" => X8664ATTOpcode::Js,
            "outsl" => X8664ATTOpcode::Outsl,
            "xorb" => X8664ATTOpcode::Xorb,
            "addb" => X8664ATTOpcode::Addb,
            "adcb" => X8664ATTOpcode::Adcb,
            "addl" => X8664ATTOpcode::Addl,
            "pushq" => X8664ATTOpcode::Pushq,
            "andl" => X8664ATTOpcode::Andl,
            "cmpb" => X8664ATTOpcode::Cmpb,
            "orl" => X8664ATTOpcode::Orl,
            "cmpl" => X8664ATTOpcode::Cmpl,
            "sbbb" => X8664ATTOpcode::Sbbb,
            "orb" => X8664ATTOpcode::Orb,
            "adcl" => X8664ATTOpcode::Adcl,
            "lock" => X8664ATTOpcode::Lock,
            "movb" => X8664ATTOpcode::Movb,
            "rolb" => X8664ATTOpcode::Rolb,
            "xchgl" => X8664ATTOpcode::Xchgl,
            "jne" => X8664ATTOpcode::Jne,
            "andb" => X8664ATTOpcode::Andb,
            "outl" => X8664ATTOpcode::Outl,
            "loopne" => X8664ATTOpcode::Loopne,
            "addq" => X8664ATTOpcode::Addq,
            "movabsl" => X8664ATTOpcode::Movabsl,
            "lodsl" => X8664ATTOpcode::Lodsl,
            "lretl" => X8664ATTOpcode::Lretl,
            "subb" => X8664ATTOpcode::Subb,
            "popq" => X8664ATTOpcode::Popq,
            "movslq" => X8664ATTOpcode::Movslq,
            "jae" => X8664ATTOpcode::Jae,
            "xorl" => X8664ATTOpcode::Xorl,
            "jb" => X8664ATTOpcode::Jb,
            "outsb" => X8664ATTOpcode::Outsb,
            "addr32" => X8664ATTOpcode::Addr32,
            "jo" => X8664ATTOpcode::Jo,
            "je" => X8664ATTOpcode::Je,
            "insl" => X8664ATTOpcode::Insl,
            "ja" => X8664ATTOpcode::Ja,
            "gs" => X8664ATTOpcode::Gs,
            "outsw" => X8664ATTOpcode::Outsw,
            "jns" => X8664ATTOpcode::Jns,
            "jbe" => X8664ATTOpcode::Jbe,
            "imulw" => X8664ATTOpcode::Imulw,
            "jp" => X8664ATTOpcode::Jp,
            "movsl" => X8664ATTOpcode::Movsl,
            "scasl" => X8664ATTOpcode::Scasl,
            "int" => X8664ATTOpcode::Int,
            "movl" => X8664ATTOpcode::Movl,
            "jl" => X8664ATTOpcode::Jl,
            "clc" => X8664ATTOpcode::Clc,
            "xlatb" => X8664ATTOpcode::Xlatb,
            "outb" => X8664ATTOpcode::Outb,
            "jge" => X8664ATTOpcode::Jge,
            "nop" => X8664ATTOpcode::Nop,
            "testb" => X8664ATTOpcode::Testb,
            "shlb" => X8664ATTOpcode::Shlb,
            "fsubs" => X8664ATTOpcode::Fsubs,
            "movabsb" => X8664ATTOpcode::Movabsb,
            "shrb" => X8664ATTOpcode::Shrb,
            "callq" => X8664ATTOpcode::Callq,
            "cwtl" => X8664ATTOpcode::Cwtl,
            "fsubrs" => X8664ATTOpcode::Fsubrs,
            "rep" => X8664ATTOpcode::Rep,
            "hlt" => X8664ATTOpcode::Hlt,
            "incl" => X8664ATTOpcode::Incl,
            "jnp" => X8664ATTOpcode::Jnp,
            "xorq" => X8664ATTOpcode::Xorq,
            "fdivs" => X8664ATTOpcode::Fdivs,
            "sbbl" => X8664ATTOpcode::Sbbl,
            "rcrb" => X8664ATTOpcode::Rcrb,
            "rorb" => X8664ATTOpcode::Rorb,
            "loope" => X8664ATTOpcode::Loope,
            "stosl" => X8664ATTOpcode::Stosl,
            "testl" => X8664ATTOpcode::Testl,
            "enter" => X8664ATTOpcode::Enter,
            "sarb" => X8664ATTOpcode::Sarb,
            "jno" => X8664ATTOpcode::Jno,
            "fnsave" => X8664ATTOpcode::Fnsave,
            "retq" => X8664ATTOpcode::Retq,
            "cmpq" => X8664ATTOpcode::Cmpq,
            "inb" => X8664ATTOpcode::Inb,
            "ds" => X8664ATTOpcode::Ds,
            "fdivrs" => X8664ATTOpcode::Fdivrs,
            "xchgb" => X8664ATTOpcode::Xchgb,
            "fadds" => X8664ATTOpcode::Fadds,
            "fimull" => X8664ATTOpcode::Fimull,
            "movw" => X8664ATTOpcode::Movw,
            "lodsb" => X8664ATTOpcode::Lodsb,
            "leal" => X8664ATTOpcode::Leal,
            "andq" => X8664ATTOpcode::Andq,
            "fmuls" => X8664ATTOpcode::Fmuls,
            "jmp" => X8664ATTOpcode::Jmp,
            "fiadds" => X8664ATTOpcode::Fiadds,
            "cli" => X8664ATTOpcode::Cli,
            "cmc" => X8664ATTOpcode::Cmc,
            "stc" => X8664ATTOpcode::Stc,
            "incb" => X8664ATTOpcode::Incb,
            "std" => X8664ATTOpcode::Std,
            "repne" => X8664ATTOpcode::Repne,
            "sti" => X8664ATTOpcode::Sti,
            "fldl" => X8664ATTOpcode::Fldl,
            "popfq" => X8664ATTOpcode::Popfq,
            "subq" => X8664ATTOpcode::Subq,
            "movq" => X8664ATTOpcode::Movq,
            "testq" => X8664ATTOpcode::Testq,
            "jmpq" => X8664ATTOpcode::Jmpq,
            "nopl" => X8664ATTOpcode::Nopl,
            "testw" => X8664ATTOpcode::Testw,
            "incq" => X8664ATTOpcode::Incq,
            "rolw" => X8664ATTOpcode::Rolw,
            "andw" => X8664ATTOpcode::Andw,
            "tzcntl" => X8664ATTOpcode::Tzcntl,
            "leaq" => X8664ATTOpcode::Leaq,
            "nopw" => X8664ATTOpcode::Nopw,
            "movzbl" => X8664ATTOpcode::Movzbl,
            "bsrq" => X8664ATTOpcode::Bsrq,
            "notl" => X8664ATTOpcode::Notl,
            "shrq" => X8664ATTOpcode::Shrq,
            "shlq" => X8664ATTOpcode::Shlq,
            "cmovaeq" => X8664ATTOpcode::Cmovaeq,
            "movups" => X8664ATTOpcode::Movups,
            "movaps" => X8664ATTOpcode::Movaps,
            "orq" => X8664ATTOpcode::Orq,
            "setb" => X8664ATTOpcode::Setb,
            "sete" => X8664ATTOpcode::Sete,
            "decq" => X8664ATTOpcode::Decq,
            "adcq" => X8664ATTOpcode::Adcq,
            "cmovaq" => X8664ATTOpcode::Cmovaq,
            "movabsq" => X8664ATTOpcode::Movabsq,
            "shll" => X8664ATTOpcode::Shll,
            "notq" => X8664ATTOpcode::Notq,
            "imulq" => X8664ATTOpcode::Imulq,
            "xorps" => X8664ATTOpcode::Xorps,
            "pause" => X8664ATTOpcode::Pause,
            "cmpxchgl" => X8664ATTOpcode::Cmpxchgl,
            "cmovneq" => X8664ATTOpcode::Cmovneq,
            "ud2" => X8664ATTOpcode::Ud2,
            "decl" => X8664ATTOpcode::Decl,
            "jle" => X8664ATTOpcode::Jle,
            "sarq" => X8664ATTOpcode::Sarq,
            "cqto" => X8664ATTOpcode::Cqto,
            "idivq" => X8664ATTOpcode::Idivq,
            "shrl" => X8664ATTOpcode::Shrl,
            "setne" => X8664ATTOpcode::Setne,
            "jg" => X8664ATTOpcode::Jg,
            "cmovbq" => X8664ATTOpcode::Cmovbq,
            "cmoveq" => X8664ATTOpcode::Cmoveq,
            "negq" => X8664ATTOpcode::Negq,
            "movzwl" => X8664ATTOpcode::Movzwl,
            "sbbq" => X8664ATTOpcode::Sbbq,
            "mulq" => X8664ATTOpcode::Mulq,
            "setae" => X8664ATTOpcode::Setae,
            "movd" => X8664ATTOpcode::Movd,
            "punpcklbw" => X8664ATTOpcode::Punpcklbw,
            "pshuflw" => X8664ATTOpcode::Pshuflw,
            "pshufd" => X8664ATTOpcode::Pshufd,
            "movdqa" => X8664ATTOpcode::Movdqa,
            "movdqu" => X8664ATTOpcode::Movdqu,
            "pcmpeqb" => X8664ATTOpcode::Pcmpeqb,
            "pand" => X8664ATTOpcode::Pand,
            "pmovmskb" => X8664ATTOpcode::Pmovmskb,
            "btq" => X8664ATTOpcode::Btq,
            "cmpw" => X8664ATTOpcode::Cmpw,
            "cmovgeq" => X8664ATTOpcode::Cmovgeq,
            "cmovel" => X8664ATTOpcode::Cmovel,
            "cmoval" => X8664ATTOpcode::Cmoval,
            "pinsrw" => X8664ATTOpcode::Pinsrw,
            "pxor" => X8664ATTOpcode::Pxor,
            "movss" => X8664ATTOpcode::Movss,
            "movsd" => X8664ATTOpcode::Movsd,
            "btl" => X8664ATTOpcode::Btl,
            "divb" => X8664ATTOpcode::Divb,
            "negb" => X8664ATTOpcode::Negb,
            "cmovbl" => X8664ATTOpcode::Cmovbl,
            "cmovbeq" => X8664ATTOpcode::Cmovbeq,
            "setbe" => X8664ATTOpcode::Setbe,
            "movsbq" => X8664ATTOpcode::Movsbq,
            "notb" => X8664ATTOpcode::Notb,
            "divq" => X8664ATTOpcode::Divq,
            "divl" => X8664ATTOpcode::Divl,
            "pextrw" => X8664ATTOpcode::Pextrw,
            "psllw" => X8664ATTOpcode::Psllw,
            "por" => X8664ATTOpcode::Por,
            "punpcklwd" => X8664ATTOpcode::Punpcklwd,
            "punpckldq" => X8664ATTOpcode::Punpckldq,
            "cmpxchgq" => X8664ATTOpcode::Cmpxchgq,
            "cmovsq" => X8664ATTOpcode::Cmovsq,
            "cmovnel" => X8664ATTOpcode::Cmovnel,
            "cmovael" => X8664ATTOpcode::Cmovael,
            "xaddl" => X8664ATTOpcode::Xaddl,
            "movswq" => X8664ATTOpcode::Movswq,
            "setg" => X8664ATTOpcode::Setg,
            "movlps" => X8664ATTOpcode::Movlps,
            "punpcklqdq" => X8664ATTOpcode::Punpcklqdq,
            "movlhps" => X8664ATTOpcode::Movlhps,
            "decb" => X8664ATTOpcode::Decb,
            "bswapl" => X8664ATTOpcode::Bswapl,
            "orw" => X8664ATTOpcode::Orw,
            "seta" => X8664ATTOpcode::Seta,
            "divw" => X8664ATTOpcode::Divw,
            "adcw" => X8664ATTOpcode::Adcw,
            "movswl" => X8664ATTOpcode::Movswl,
            "negl" => X8664ATTOpcode::Negl,
            "xorw" => X8664ATTOpcode::Xorw,
            "paddd" => X8664ATTOpcode::Paddd,
            "pmuludq" => X8664ATTOpcode::Pmuludq,
            "psrld" => X8664ATTOpcode::Psrld,
            "psubd" => X8664ATTOpcode::Psubd,
            "psllq" => X8664ATTOpcode::Psllq,
            "unpcklps" => X8664ATTOpcode::Unpcklps,
            "mull" => X8664ATTOpcode::Mull,
            "seto" => X8664ATTOpcode::Seto,
            "bsrl" => X8664ATTOpcode::Bsrl,
            "paddq" => X8664ATTOpcode::Paddq,
            "pandn" => X8664ATTOpcode::Pandn,
            "pcmpgtb" => X8664ATTOpcode::Pcmpgtb,
            "setge" => X8664ATTOpcode::Setge,
            "pcmpeqd" => X8664ATTOpcode::Pcmpeqd,
            "psrlq" => X8664ATTOpcode::Psrlq,
            "punpckhqdq" => X8664ATTOpcode::Punpckhqdq,
            "btsq" => X8664ATTOpcode::Btsq,
            "pcmpgtd" => X8664ATTOpcode::Pcmpgtd,
            "movmskps" => X8664ATTOpcode::Movmskps,
            "cmovsl" => X8664ATTOpcode::Cmovsl,
            "shrdq" => X8664ATTOpcode::Shrdq,
            "shldq" => X8664ATTOpcode::Shldq,
            "insw" => X8664ATTOpcode::Insw,
            "cld" => X8664ATTOpcode::Cld,
            "ljmpl" => X8664ATTOpcode::Ljmpl,
            "lcalll" => X8664ATTOpcode::Lcalll,
            "sahf" => X8664ATTOpcode::Sahf,
            "lahf" => X8664ATTOpcode::Lahf,
            "scasb" => X8664ATTOpcode::Scasb,
            "sarl" => X8664ATTOpcode::Sarl,
            "leave" => X8664ATTOpcode::Leave,
            "fdivr" => X8664ATTOpcode::Fdivr,
            "inl" => X8664ATTOpcode::Inl,
            "rorl" => X8664ATTOpcode::Rorl,
            "cmpsl" => X8664ATTOpcode::Cmpsl,
            "vpaddw" => X8664ATTOpcode::Vpaddw,
            "roll" => X8664ATTOpcode::Roll,
            "cmpsb" => X8664ATTOpcode::Cmpsb,
            "fs" => X8664ATTOpcode::Fs,
            "filds" => X8664ATTOpcode::Filds,
            "pushw" => X8664ATTOpcode::Pushw,
            "fdivrp" => X8664ATTOpcode::Fdivrp,
            "ficomps" => X8664ATTOpcode::Ficomps,
            "es" => X8664ATTOpcode::Es,
            "fbld" => X8664ATTOpcode::Fbld,
            "movsb" => X8664ATTOpcode::Movsb,
            "pushfq" => X8664ATTOpcode::Pushfq,
            "int3" => X8664ATTOpcode::Int3,
            "faddl" => X8664ATTOpcode::Faddl,
            "stosb" => X8664ATTOpcode::Stosb,
            "cltd" => X8664ATTOpcode::Cltd,
            "wait" => X8664ATTOpcode::Wait,
            "rex64" => X8664ATTOpcode::Rex64,
            "loop" => X8664ATTOpcode::Loop,
            "fiaddl" => X8664ATTOpcode::Fiaddl,
            "data16" => X8664ATTOpcode::Data16,
            "ss" => X8664ATTOpcode::Ss,
            "cs" => X8664ATTOpcode::Cs,
            "flds" => X8664ATTOpcode::Flds,
            "fildl" => X8664ATTOpcode::Fildl,
            "iretl" => X8664ATTOpcode::Iretl,
            "rclb" => X8664ATTOpcode::Rclb,
            "fcomp" => X8664ATTOpcode::Fcomp,
            "unpckhps" => X8664ATTOpcode::Unpckhps,
            "vpandn" => X8664ATTOpcode::Vpandn,
            "fcmovu" => X8664ATTOpcode::Fcmovu,
            "cltq" => X8664ATTOpcode::Cltq,
            "fisttps" => X8664ATTOpcode::Fisttps,
            "fdiv" => X8664ATTOpcode::Fdiv,
            "fistps" => X8664ATTOpcode::Fistps,
            "lsll" => X8664ATTOpcode::Lsll,
            "sldtw" => X8664ATTOpcode::Sldtw,
            "fsincos" => X8664ATTOpcode::Fsincos,
            "jrcxz" => X8664ATTOpcode::Jrcxz,
            "idivl" => X8664ATTOpcode::Idivl,
            "fdivl" => X8664ATTOpcode::Fdivl,
            "fcomps" => X8664ATTOpcode::Fcomps,
            "idivb" => X8664ATTOpcode::Idivb,
            "fisttpl" => X8664ATTOpcode::Fisttpl,
            "fmull" => X8664ATTOpcode::Fmull,
            "fsubl" => X8664ATTOpcode::Fsubl,
            "fcoml" => X8664ATTOpcode::Fcoml,
            "fbstp" => X8664ATTOpcode::Fbstp,
            "fcoms" => X8664ATTOpcode::Fcoms,
            "fsubr" => X8664ATTOpcode::Fsubr,
            "pmaxsw" => X8664ATTOpcode::Pmaxsw,
            "shufps" => X8664ATTOpcode::Shufps,
            "prefetch" => X8664ATTOpcode::Prefetch,
            "fnstsw" => X8664ATTOpcode::Fnstsw,
            "iretq" => X8664ATTOpcode::Iretq,
            "paddw" => X8664ATTOpcode::Paddw,
            "ljmpq" => X8664ATTOpcode::Ljmpq,
            "ficoml" => X8664ATTOpcode::Ficoml,
            "sgdtq" => X8664ATTOpcode::Sgdtq,
            "packuswb" => X8664ATTOpcode::Packuswb,
            "fisttpll" => X8664ATTOpcode::Fisttpll,
            "addw" => X8664ATTOpcode::Addw,
            "monitorx" => X8664ATTOpcode::Monitorx,
            "fidivl" => X8664ATTOpcode::Fidivl,
            "ficompl" => X8664ATTOpcode::Ficompl,
            "lodsq" => X8664ATTOpcode::Lodsq,
            "getsec" => X8664ATTOpcode::Getsec,
            "pslld" => X8664ATTOpcode::Pslld,
            "fldt" => X8664ATTOpcode::Fldt,
            "imulb" => X8664ATTOpcode::Imulb,
            "rcrl" => X8664ATTOpcode::Rcrl,
            "fstpl" => X8664ATTOpcode::Fstpl,
            "fildll" => X8664ATTOpcode::Fildll,
            "ficoms" => X8664ATTOpcode::Ficoms,
            "fdivrl" => X8664ATTOpcode::Fdivrl,
            "rcll" => X8664ATTOpcode::Rcll,
            "sysretl" => X8664ATTOpcode::Sysretl,
            "fistl" => X8664ATTOpcode::Fistl,
            "fstps" => X8664ATTOpcode::Fstps,
            "fidivrs" => X8664ATTOpcode::Fidivrs,
            "frstor" => X8664ATTOpcode::Frstor,
            "fists" => X8664ATTOpcode::Fists,
            "fimuls" => X8664ATTOpcode::Fimuls,
            "fucomp" => X8664ATTOpcode::Fucomp,
            "xchgq" => X8664ATTOpcode::Xchgq,
            "fldenv" => X8664ATTOpcode::Fldenv,
            "fucom" => X8664ATTOpcode::Fucom,
            "fsubrl" => X8664ATTOpcode::Fsubrl,
            "fsts" => X8664ATTOpcode::Fsts,
            "fmul" => X8664ATTOpcode::Fmul,
            "fmulp" => X8664ATTOpcode::Fmulp,
            "emms" => X8664ATTOpcode::Emms,
            "movsq" => X8664ATTOpcode::Movsq,
            "fst" => X8664ATTOpcode::Fst,
            "fisubrs" => X8664ATTOpcode::Fisubrs,
            "fld" => X8664ATTOpcode::Fld,
            "fadd" => X8664ATTOpcode::Fadd,
            "invd" => X8664ATTOpcode::Invd,
            "ffree" => X8664ATTOpcode::Ffree,
            "lretq" => X8664ATTOpcode::Lretq,
            "scasq" => X8664ATTOpcode::Scasq,
            "scasw" => X8664ATTOpcode::Scasw,
            "xrelease" => X8664ATTOpcode::Xrelease,
            "fldcw" => X8664ATTOpcode::Fldcw,
            "fisubs" => X8664ATTOpcode::Fisubs,
            "clts" => X8664ATTOpcode::Clts,
            "wbinvd" => X8664ATTOpcode::Wbinvd,
            "fcmovbe" => X8664ATTOpcode::Fcmovbe,
            "fcmovb" => X8664ATTOpcode::Fcmovb,
            "punpckhdq" => X8664ATTOpcode::Punpckhdq,
            "fcmovnb" => X8664ATTOpcode::Fcmovnb,
            "fstl" => X8664ATTOpcode::Fstl,
            "outw" => X8664ATTOpcode::Outw,
            "mulb" => X8664ATTOpcode::Mulb,
            "larl" => X8664ATTOpcode::Larl,
            "sbbw" => X8664ATTOpcode::Sbbw,
            "rolq" => X8664ATTOpcode::Rolq,
            "fucompi" => X8664ATTOpcode::Fucompi,
            "cmpsq" => X8664ATTOpcode::Cmpsq,
            "fcompl" => X8664ATTOpcode::Fcompl,
            "lgdtq" => X8664ATTOpcode::Lgdtq,
            "fisubrl" => X8664ATTOpcode::Fisubrl,
            "xchgw" => X8664ATTOpcode::Xchgw,
            "femms" => X8664ATTOpcode::Femms,
            "fnstenv" => X8664ATTOpcode::Fnstenv,
            "rdmsr" => X8664ATTOpcode::Rdmsr,
            "paddusw" => X8664ATTOpcode::Paddusw,
            "frndint" => X8664ATTOpcode::Frndint,
            "stosq" => X8664ATTOpcode::Stosq,
            "verw" => X8664ATTOpcode::Verw,
            "lldtw" => X8664ATTOpcode::Lldtw,
            "cmovbel" => X8664ATTOpcode::Cmovbel,
            "callw" => X8664ATTOpcode::Callw,
            "shrdl" => X8664ATTOpcode::Shrdl,
            "verr" => X8664ATTOpcode::Verr,
            "strw" => X8664ATTOpcode::Strw,
            "ltrw" => X8664ATTOpcode::Ltrw,
            "syscall" => X8664ATTOpcode::Syscall,
            "packssdw" => X8664ATTOpcode::Packssdw,
            "cmovol" => X8664ATTOpcode::Cmovol,
            "bsfl" => X8664ATTOpcode::Bsfl,
            "strl" => X8664ATTOpcode::Strl,
            "setns" => X8664ATTOpcode::Setns,
            "smsww" => X8664ATTOpcode::Smsww,
            "cmovnpl" => X8664ATTOpcode::Cmovnpl,
            "fidivrl" => X8664ATTOpcode::Fidivrl,
            "fistpl" => X8664ATTOpcode::Fistpl,
            "paddsb" => X8664ATTOpcode::Paddsb,
            "strq" => X8664ATTOpcode::Strq,
            "vphaddw" => X8664ATTOpcode::Vphaddw,
            "sldtq" => X8664ATTOpcode::Sldtq,
            "sldtl" => X8664ATTOpcode::Sldtl,
            "fsubp" => X8664ATTOpcode::Fsubp,
            "fucomi" => X8664ATTOpcode::Fucomi,
            "rsqrtps" => X8664ATTOpcode::Rsqrtps,
            "fstp" => X8664ATTOpcode::Fstp,
            "fcmovnu" => X8664ATTOpcode::Fcmovnu,
            "prefetcht0" => X8664ATTOpcode::Prefetcht0,
            "prefetchnta" => X8664ATTOpcode::Prefetchnta,
            "popw" => X8664ATTOpcode::Popw,
            "lidtq" => X8664ATTOpcode::Lidtq,
            "rorq" => X8664ATTOpcode::Rorq,
            "fistpll" => X8664ATTOpcode::Fistpll,
            "fnstcw" => X8664ATTOpcode::Fnstcw,
            "psubw" => X8664ATTOpcode::Psubw,
            "fcmovne" => X8664ATTOpcode::Fcmovne,
            "fcmovnbe" => X8664ATTOpcode::Fcmovnbe,
            "fidivs" => X8664ATTOpcode::Fidivs,
            "vpshrdvd" => X8664ATTOpcode::Vpshrdvd,
            "fsub" => X8664ATTOpcode::Fsub,
            "leaw" => X8664ATTOpcode::Leaw,
            "fprem" => X8664ATTOpcode::Fprem,
            "psubsw" => X8664ATTOpcode::Psubsw,
            "cmpsw" => X8664ATTOpcode::Cmpsw,
            "stosw" => X8664ATTOpcode::Stosw,
            "fincstp" => X8664ATTOpcode::Fincstp,
            "cmovpl" => X8664ATTOpcode::Cmovpl,
            "cvtps2pi" => X8664ATTOpcode::Cvtps2pi,
            "rdtsc" => X8664ATTOpcode::Rdtsc,
            "ftst" => X8664ATTOpcode::Ftst,
            "faddp" => X8664ATTOpcode::Faddp,
            "shldl" => X8664ATTOpcode::Shldl,
            "fcompp" => X8664ATTOpcode::Fcompp,
            "pmulhuw" => X8664ATTOpcode::Pmulhuw,
            "fstpt" => X8664ATTOpcode::Fstpt,
            "paddb" => X8664ATTOpcode::Paddb,
            "psubq" => X8664ATTOpcode::Psubq,
            "xacquire" => X8664ATTOpcode::Xacquire,
            "cvtdq2ps" => X8664ATTOpcode::Cvtdq2ps,
            "fxam" => X8664ATTOpcode::Fxam,
            "vandps" => X8664ATTOpcode::Vandps,
            "iretw" => X8664ATTOpcode::Iretw,
            "fcom" => X8664ATTOpcode::Fcom,
            "psubusw" => X8664ATTOpcode::Psubusw,
            "pminsw" => X8664ATTOpcode::Pminsw,
            "lgsl" => X8664ATTOpcode::Lgsl,
            "fisubl" => X8664ATTOpcode::Fisubl,
            "vroundsd" => X8664ATTOpcode::Vroundsd,
            "fdivp" => X8664ATTOpcode::Fdivp,
            "vpshufb" => X8664ATTOpcode::Vpshufb,
            "movntq" => X8664ATTOpcode::Movntq,
            "sysenter" => X8664ATTOpcode::Sysenter,
            "cmovgel" => X8664ATTOpcode::Cmovgel,
            "movsbl" => X8664ATTOpcode::Movsbl,
            "paddusb" => X8664ATTOpcode::Paddusb,
            "psraw" => X8664ATTOpcode::Psraw,
            "movntil" => X8664ATTOpcode::Movntil,
            "cmovnol" => X8664ATTOpcode::Cmovnol,
            "mulps" => X8664ATTOpcode::Mulps,
            "divps" => X8664ATTOpcode::Divps,
            "comiss" => X8664ATTOpcode::Comiss,
            "btsl" => X8664ATTOpcode::Btsl,
            "cpuid" => X8664ATTOpcode::Cpuid,
            "subps" => X8664ATTOpcode::Subps,
            "rcpps" => X8664ATTOpcode::Rcpps,
            "wrmsr" => X8664ATTOpcode::Wrmsr,
            "setno" => X8664ATTOpcode::Setno,
            "movhps" => X8664ATTOpcode::Movhps,
            "xaddb" => X8664ATTOpcode::Xaddb,
            "pmullw" => X8664ATTOpcode::Pmullw,
            "sqrtps" => X8664ATTOpcode::Sqrtps,
            "pmaxub" => X8664ATTOpcode::Pmaxub,
            "punpckhwd" => X8664ATTOpcode::Punpckhwd,
            "paddsw" => X8664ATTOpcode::Paddsw,
            "movntps" => X8664ATTOpcode::Movntps,
            "punpckhbw" => X8664ATTOpcode::Punpckhbw,
            "fxsave" => X8664ATTOpcode::Fxsave,
            "pcmpgtw" => X8664ATTOpcode::Pcmpgtw,
            "cvtps2pd" => X8664ATTOpcode::Cvtps2pd,
            "pshufw" => X8664ATTOpcode::Pshufw,
            "prefetcht1" => X8664ATTOpcode::Prefetcht1,
            "fxtract" => X8664ATTOpcode::Fxtract,
            "movbel" => X8664ATTOpcode::Movbel,
            "pmulhw" => X8664ATTOpcode::Pmulhw,
            "prefetchw" => X8664ATTOpcode::Prefetchw,
            "xabort" => X8664ATTOpcode::Xabort,
            "ffreep" => X8664ATTOpcode::Ffreep,
            "lcallq" => X8664ATTOpcode::Lcallq,
            "pcmpeqw" => X8664ATTOpcode::Pcmpeqw,
            "fcompi" => X8664ATTOpcode::Fcompi,
            "ucomiss" => X8664ATTOpcode::Ucomiss,
            "addps" => X8664ATTOpcode::Addps,
            "setle" => X8664ATTOpcode::Setle,
            "vpcmpeqb" => X8664ATTOpcode::Vpcmpeqb,
            "vucomisd" => X8664ATTOpcode::Vucomisd,
            "orps" => X8664ATTOpcode::Orps,
            "vpmaddubsw" => X8664ATTOpcode::Vpmaddubsw,
            "vaddss" => X8664ATTOpcode::Vaddss,
            "vunpckhpd" => X8664ATTOpcode::Vunpckhpd,
            "vpslld" => X8664ATTOpcode::Vpslld,
            "vpcmpgtd" => X8664ATTOpcode::Vpcmpgtd,
            "vaddps" => X8664ATTOpcode::Vaddps,
            "vphsubw" => X8664ATTOpcode::Vphsubw,
            "subw" => X8664ATTOpcode::Subw,
            "vpdpwssd" => X8664ATTOpcode::Vpdpwssd,
            "vpblendmb" => X8664ATTOpcode::Vpblendmb,
            "vpsrlvd" => X8664ATTOpcode::Vpsrlvd,
            "vpacksswb" => X8664ATTOpcode::Vpacksswb,
            "vminps" => X8664ATTOpcode::Vminps,
            "vmaxsh" => X8664ATTOpcode::Vmaxsh,
            "vpermi2b" => X8664ATTOpcode::Vpermi2b,
            "vpminsd" => X8664ATTOpcode::Vpminsd,
            "vmaxps" => X8664ATTOpcode::Vmaxps,
            "vpblendmd" => X8664ATTOpcode::Vpblendmd,
            "vmaxph" => X8664ATTOpcode::Vmaxph,
            "vpunpcklwd" => X8664ATTOpcode::Vpunpcklwd,
            "vpunpckhwd" => X8664ATTOpcode::Vpunpckhwd,
            "vpunpckldq" => X8664ATTOpcode::Vpunpckldq,
            "vpermd" => X8664ATTOpcode::Vpermd,
            "vpshrdd" => X8664ATTOpcode::Vpshrdd,
            "vpackuswb" => X8664ATTOpcode::Vpackuswb,
            "vinserti32x4" => X8664ATTOpcode::Vinserti32x4,
            "vpminsb" => X8664ATTOpcode::Vpminsb,
            "vpermi2ps" => X8664ATTOpcode::Vpermi2ps,
            "lodsw" => X8664ATTOpcode::Lodsw,
            "fxch" => X8664ATTOpcode::Fxch,
            "cmovlel" => X8664ATTOpcode::Cmovlel,
            "cwtd" => X8664ATTOpcode::Cwtd,
            "retw" => X8664ATTOpcode::Retw,
            "btcl" => X8664ATTOpcode::Btcl,
            "fsubrp" => X8664ATTOpcode::Fsubrp,
            "fldlg2" => X8664ATTOpcode::Fldlg2,
            "fptan" => X8664ATTOpcode::Fptan,
            "fcos" => X8664ATTOpcode::Fcos,
            "fucompp" => X8664ATTOpcode::Fucompp,
            _ => X8664ATTOpcode::Unknown(opcode.to_string()),
        }
    }
}

#[derive(Debug)]
enum X8664ATTOperand {
    Register(X8664ATTRegister),
    Immediate(X8664ATTImmediate),
    Address(X8664ATTAddress),
}

impl TryFrom<&str> for X8664ATTOperand {
    type Error = ObjumpError;

    fn try_from(operand: &str) -> Result<Self, ObjumpError> {
        if operand.starts_with("%") {
            Ok(X8664ATTOperand::Register(operand.into()))
        } else if operand.starts_with("$") {
            Ok(X8664ATTOperand::Immediate(operand.try_into()?))
        } else {
            Ok(X8664ATTOperand::Address(operand.try_into()?))
        }
    }
}

#[derive(Debug)]
enum X8664ATTRegister {
    Rax,
    Rbx,
    Rcx,
    Rdx,
    Rsi,
    Rdi,
    Rbp,
    Rsp,
    R8,
    R9,
    R10,
    R11,
    R12,
    R13,
    R14,
    R15,
    Unknown(String),
}

impl From<&str> for X8664ATTRegister {
    fn from(register: &str) -> Self {
        match register {
            "%rax" => X8664ATTRegister::Rax,
            "%rbx" => X8664ATTRegister::Rbx,
            "%rcx" => X8664ATTRegister::Rcx,
            "%rdx" => X8664ATTRegister::Rdx,
            "%rsi" => X8664ATTRegister::Rsi,
            "%rdi" => X8664ATTRegister::Rdi,
            "%rbp" => X8664ATTRegister::Rbp,
            "%rsp" => X8664ATTRegister::Rsp,
            "%r8" => X8664ATTRegister::R8,
            "%r9" => X8664ATTRegister::R9,
            "%r10" => X8664ATTRegister::R10,
            "%r11" => X8664ATTRegister::R11,
            "%r12" => X8664ATTRegister::R12,
            "%r13" => X8664ATTRegister::R13,
            "%r14" => X8664ATTRegister::R14,
            "%r15" => X8664ATTRegister::R15,
            _ => X8664ATTRegister::Unknown(register.to_string()),
        }
    }
}

#[derive(Debug)]
struct X8664ATTAddress {
    displacement: Option<X8664ATTInteger>,
    base: Option<X8664ATTValue>,
    offset: X8664ATTValue,
    scaler: Option<X8664ATTInteger>,
}

impl TryFrom<&str> for X8664ATTAddress {
    type Error = ObjumpError;

    fn try_from(memory: &str) -> Result<Self, ObjumpError> {
        let mut parts = memory.split("(");
        let displacement = match parts.next() {
            Some(displacement) => {
                if displacement.is_empty() {
                    None
                } else {
                    Some(X8664ATTInteger::try_from(displacement)?)
                }
            }
            None => None,
        };

        let mut memory = parts.next().unwrap();
        memory = memory.trim_end_matches(")");
        let mut parts = memory.split(",");
        let base = match parts.next() {
            Some(base) => {
                if base.is_empty() {
                    None
                } else {
                    Some(X8664ATTValue::try_from(base)?)
                }
            }
            None => None,
        };

        let offset = parts
            .next()
            .ok_or(ObjumpError::InvalidInstruction(memory.to_string()))?
            .try_into()?;
        let scaler = match parts.next() {
            Some(scaler) => {
                if scaler.is_empty() {
                    None
                } else {
                    Some(X8664ATTInteger::try_from(scaler)?)
                }
            }
            None => None,
        };

        Ok(X8664ATTAddress {
            displacement,
            base,
            offset,
            scaler,
        })
    }
}

#[derive(Debug)]
enum X8664ATTValue {
    Register(X8664ATTRegister),
    Immediate(X8664ATTImmediate),
}

impl TryFrom<&str> for X8664ATTValue {
    type Error = ObjumpError;

    fn try_from(value: &str) -> Result<Self, ObjumpError> {
        if value.starts_with("$") {
            Ok(X8664ATTValue::Immediate(X8664ATTImmediate::try_from(
                value,
            )?))
        } else {
            Ok(X8664ATTValue::Register(X8664ATTRegister::from(value)))
        }
    }
}

#[derive(Debug)]
struct X8664ATTImmediate(u64);

impl TryFrom<&str> for X8664ATTImmediate {
    type Error = ObjumpError;

    fn try_from(immediate: &str) -> Result<Self, ObjumpError> {
        if immediate.starts_with("$0x") {
            Ok(X8664ATTImmediate(u64::from_str_radix(&immediate[3..], 16)?))
        } else if immediate.starts_with("$0b") {
            Ok(X8664ATTImmediate(u64::from_str_radix(&immediate[3..], 2)?))
        } else {
            Ok(X8664ATTImmediate(u64::from_str_radix(&immediate[1..], 10)?))
        }
    }
}

#[derive(Debug)]
struct X8664ATTInteger(u64);

impl TryFrom<&str> for X8664ATTInteger {
    type Error = ObjumpError;

    fn try_from(integer: &str) -> Result<Self, ObjumpError> {
        if integer.starts_with("0x") {
            Ok(X8664ATTInteger(u64::from_str_radix(&integer[2..], 16)?))
        } else if integer.starts_with("0b") {
            Ok(X8664ATTInteger(u64::from_str_radix(&integer[2..], 2)?))
        } else {
            Ok(X8664ATTInteger(u64::from_str_radix(integer, 10)?))
        }
    }
}

impl Into<u64> for X8664ATTInteger {
    fn into(self) -> u64 {
        self.0
    }
}

pub fn parse_x8664_att_instruction(line: &str) -> Result<X8664ATTInstruction, ObjumpError> {
    let parts: Vec<&str> = line.split_whitespace().collect();
    let opcode = X8664ATTOpcode::from(parts[0]);
    let mut operands = Vec::new();
    let mut data = String::new();
    for part in &parts[1..] {
        if part.starts_with("<") {
            data = part.to_string();
            break;
        } else {
            operands.push(X8664ATTOperand::try_from(*part)?);
        }
    }
    Ok(X8664ATTInstruction {
        opcode,
        operands,
        data,
    })
}